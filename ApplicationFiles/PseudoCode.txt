DATA CLASSES

Board(data class): PREMADE
Array (PropertyData): Properties

PropertyData (data class): PREMADE
Int location
String Name
Int price
type: is or isnt property

Players(data class)
Array(string) names


FUNCTIONAL CLASSES
Player (class)
int: id
string: name
int: money
int: location
MovePlayerFunction() =>  Update Location by calling GetPropertyCount() from GameBoard and checking that new location is lower than max. Remove count amount if not and update new location. Get the property & owner from Game Board. Check if you are the owner. If not, remove the sale price from money.  Call an event about player moving. - this could be subscribed to by the front end systems. 



TurnManager:
Array(playerIDs). This needs to be an ordered data structure. We need to seed the player order as this is in the instructions
CurrentTurnOwner (int PlayerID)
TurnState: Rolling Dice, ResolvingPropertyInteraction. If this was a bigger project, we'd want a state manager. 
CreatePlayerOrder() => Try get the predetermined playerorderdata. If fails, creates 4 random players. 
Initialize() => Set TurnState to Rolling Dice. Call Set Player Order

InputManager:
Figure this out later, it isn't important until we need to use the other dice roll set. 

PropertyTracker:
BoardData: The current board data (make this read-only (immutable) if I can)
Dictionary (int property, int owner): PropertyOwnerDict => Unless we have special things happening on the view, order probably doesn't matter, so we can use a dict (if Ruby has them). 
GetPropertyFunction(int location) => Return property or "go" at location int by asking the boardDatas array
GetPropertyCountFunction() => How many properties are in the board data?
Initialize() => Set the dictionary to contain all properties, unowned


Unit Tester Class? => Will attempt, but not important






